/**
 * Testing of various Xenum functionality.
 * Uses a test enum generated by xenum-test-gen, included at the bottom.
 */
// Suffix of the generated enum to test here.
#define _XENUM4_TEST_SUFFIX	Dummies

#include <iostream>
//#include <array>

int main(int argc, char* argv[])
{
	std::cout<<"xenum test..."<<std::endl;
}

#include <xenum4/impl/TupleTree.hpp>


/// =============================================================================================
/// ITERATE_DEPTH_INC() testing
/// Only testing the INC() function.
/// =============================================================================================

#define _XENUM4_TEST_ITERATE_DEPTH_INC(CTXT, PROPVALUE)						\
	_XENUM4_TEST_ITERATE_DEPTH_INC_I1(							\
		PROPVALUE,									\
		_XENUM4_PROPDEF_GET_DEPTH(_XENUM4_CTXT_GET_PROPDEF(CTXT)),			\
		(_XENUM4_TEST_CB_GEN, _XENUM4_TEST_GEN_FLT_COND),				\
		CTXT										\
	)

#define _XENUM4_TEST_ITERATE_DEPTH_INC_I1(DATA, DEPTH, FUNCS, CTXT)				\
	_XENUM4_TEST_ITERATE_DEPTH_INC_I2(							\
		DATA, DEPTH, FUNCS, CTXT,							\
		_XENUM4_TUPLETREE_STATE_INIT(DATA, DEPTH, FUNCS, CTXT, )			\
	)


#define TEST_STACK_0	(((0) (2) () (0) (3)) (()((1))((2,4))))
#define TEST_STACK_1	(((0) (1) ((0)) (0) (0)) ())(((0) (2) () (1) (3)) (((1))((2,4))))
#define TEST_STACK_2	(((0) (2) () (1) (3)) (((1))((2,4))))
#define TEST_STACK_3	(((0) (1) ((1)) (0) (1)) ((1)))(((0) (2) () (2) (3)) (((2,4))))
#define TEST_STACK_4	(((0) (0) ((1)(0)) (0) (0)) (1))(((0) (1) ((1)) (1) (1)) ())(((0) (2) () (2) (3)) (((2,4))))
#define TEST_STACK_5	(((0) (1) ((1)) (1) (1)) ())(((0) (2) () (2) (3)) (((2,4))))
#define TEST_STACK_6	(((0) (2) () (2) (3)) (((2,4))))
#define TEST_STACK_7	(((0) (1) ((2)) (0) (2)) ((2)(4)))(((0) (2) () (3) (3)) ())
#define TEST_STACK_8	(((0) (0) ((2)(0)) (0) (0)) (2))(((0) (1) ((2)) (1) (2)) ((4)))(((0) (2) () (3) (3)) ())
#define TEST_STACK_9	(((0) (1) ((2)) (1) (2)) ((4)))(((0) (2) () (3) (3)) ())
#define TEST_STACK_10	(((0) (0) ((2)(1)) (0) (0)) (4))(((0) (1) ((2)) (2) (2)) ())(((0) (2) () (3) (3)) ())
#define TEST_STACK_11	(((0) (1) ((2)) (2) (2)) ())(((0) (2) () (3) (3)) ())
#define TEST_STACK_12	(((0) (2) () (3) (3)) ())
#define TEST_STACK_13	

#define _XENUM4_TEST_ITERATE_DEPTH_INC_I2(DATA, DEPTH, FUNCS, CTXT, ITERSTATE)			\
	_XENUM4_TEST_ITERATE_DEPTH_INC_I3(DATA, DEPTH, FUNCS, CTXT,				\
_XENUM4_TUPLETREE_STATE_SET_STACK(ITERSTATE,							\
/*	_XENUM4_TUPLETREE_STATE_GET_STACK(ITERSTATE)*/ \
	TEST_STACK_3 \
	) \
	)

#define _XENUM4_TEST_ITERATE_DEPTH_INC_I3(DATA, DEPTH, FUNCS, CTXT, ITERSTATE)			\
_TEST_ITERATE_DEPTH_INC_I2 beg: _XENUM4_TUPLETREE_STACK_DUMP(_XENUM4_TUPLETREE_STATE_GET_STACK(ITERSTATE)) NWLN \
_TEST_ITERATE_DEPTH_INC_I2 inc: _XENUM4_TUPLETREE_STACK_DUMP(_XENUM4_TUPLETREE_DEPTH_INC(ITERSTATE)) NWLN \

/*
_TEST_ITERATE_DEPTH_INC_I2 beg: _XENUM4_TUPLETREE_STACK_DUMP(_XENUM4_TUPLETREE_STATE_GET_STACK(ITERSTATE)) NWLN \
_TEST_ITERATE_DEPTH_INC_I2 inc: _XENUM4_TUPLETREE_STACK_DUMP(_XENUM4_TUPLETREE_DEPTH_INC(ITERSTATE)) NWLN \

_TEST_ITERATE_DEPTH_INC_I2 beg: _XENUM4_TUPLETREE_STATE_GET_STACK(ITERSTATE) NWLN \
_TEST_ITERATE_DEPTH_INC_I2 inc: _XENUM4_TUPLETREE_DEPTH_INC(ITERSTATE) NWLN \
*/


/// =============================================================================================
/// ITERATE_DEPTH_GEN() testing
/// =============================================================================================

#define _XENUM4_TEST_CB_GEN(ITERPOS, NODE, CTXT)						\
_TEST_CB_GEN: \
	enum=_XENUM4_CTXT_GET_IDENT(CTXT) \
	prop=_XENUM4_PROPDEF_GET_NAME(_XENUM4_CTXT_GET_PROPDEF(CTXT)) \
	iterpos={_XENUM4_TUPLETREE_ITERPOS_DUMP(ITERPOS)} \
/*
		level=_XENUM4_TUPLETREE_ITERPOS_GET_LEVEL(ITERPOS) \
		path=_XENUM4_TUPLETREE_ITERPOS_GET_INDEXPATH(ITERPOS) \
	enum=_XENUM4_CTXT_GET_IDENT(CTXT) \
	iterpos:{ \
		level=_XENUM4_TUPLETREE_ITERPOS_GET_LEVEL(ITERPOS) \
		path=_XENUM4_TUPLETREE_ITERPOS_GET_INDEXPATH(ITERPOS) \
		count=_XENUM4_TUPLETREE_ITERPOS_GET_CHILDCOUNT(ITERPOS) \
		next=_XENUM4_TUPLETREE_ITERPOS_GET_NEXTCHILD(ITERPOS) \
	} \
*/ \
	node=NODE \
	NWLN

#define _XENUM4_TEST_GEN_FLT_1(ITERPOS, NODE, CTXT)	1
#define _XENUM4_TEST_GEN_FLT_0(ITERPOS, NODE, CTXT)	0
#define _XENUM4_TEST_GEN_FLT_COND(ITERPOS, NODE, CTXT)						\
	BOOST_PP_NOT(_XENUM4_TUPLETREE_ITERPOS_GET_NEXTCHILD(ITERPOS))


#define _XENUM4_TEST_ITERATE_DEPTH_GEN(CTXT, PROPVALUE)						\
_TEST_ITERATE_DEPTH_GEN: ctxt=CTXT propvalue=PROPVALUE NWLN \
	_XENUM4_TUPLETREE_ITERATE_DEPTH_GEN(							\
		PROPVALUE,									\
		_XENUM4_PROPDEF_GET_DEPTH(_XENUM4_CTXT_GET_PROPDEF(CTXT)),			\
		(_XENUM4_TEST_CB_GEN, _XENUM4_TEST_GEN_FLT_COND),				\
		CTXT										\
	)
/*
_TEST_ITERATE_DEPTH_GEN: ctxt=CTXT propvalue=PROPVALUE NWLN \
*/


/// =============================================================================================
/// ITERATE_FLAT_GEN() testing
/// =============================================================================================

/*
_TEST_FLT_CB: argc=BOOST_PP_VARIADIC_SIZE(__VA_ARGS__) NWLN \
1
*/

#define _XENUM4_TEST_ITERATE_FLAT_GEN(CTXT, PROPVALUE)						\
_TEST_ITERATE_FLAT_GEN: ctxt=CTXT propvalue=PROPVALUE NWLN \
	_XENUM4_TUPLETREE_ITERATE_FLAT_GEN(							\
		PROPVALUE,									\
		BOOST_PP_DEC(_XENUM4_PROPDEF_GET_DEPTH(_XENUM4_CTXT_GET_PROPDEF(CTXT))),		\
		(_XENUM4_TEST_CB_GEN),								\
		CTXT										\
	)


/// =============================================================================================
/// ITERATE_DEPTH_CALC() testing
/// =============================================================================================

#define _XENUM4_TEST_STATE_GET_VAL(STATE) \
	BOOST_PP_SEQ_ELEM(0, STATE)

#define _XENUM4_TEST_STATE_SET_VAL(STATE, VAL) \
	BOOST_PP_SEQ_REPLACE(STATE, 0, VAL)

#define _XENUM4_TEST_STATE_INIT() \
	/* empty seq */

#define _XENUM4_TUPLETREE_CALC_DUMP_STATE_ENTRY(R, DATA, ELEM)					\
IND1	[] ELEM NWLN

#define _XENUM4_TUPLETREE_CALC_DUMP_STATE(STATE)						\
_TUPLETREE_CALC_DUMP_STATE:									\
	cdata:BOOST_PP_SEQ_SIZE(CDATA) : NWLN							\
	BOOST_PP_SEQ_FOR_EACH(_XENUM4_TUPLETREE_CALC_DUMP_STATE_ENTRY, 0, STATE)		\
	NWLN

#define _XENUM4_TEST_CB_CALC(ITERPOS, NODE, CTXT, STATE)						\
	BOOST_PP_SEQ_PUSH_BACK(STATE, \
_TEST_CB_CALC: \
	prop=_XENUM4_PROPDEF_GET_NAME(_XENUM4_CTXT_GET_PROPDEF(CTXT)) \
	enum=_XENUM4_CTXT_GET_IDENT(CTXT) \
	iterpos:{ \
		level=_XENUM4_TUPLETREE_ITERPOS_GET_LEVEL(ITERPOS) \
		path=_XENUM4_TUPLETREE_ITERPOS_GET_INDEXPATH(ITERPOS) \
		count=_XENUM4_TUPLETREE_ITERPOS_GET_CHILDCOUNT(ITERPOS) \
		next=_XENUM4_TUPLETREE_ITERPOS_GET_NEXTCHILD(ITERPOS) \
	} \
	node=NODE \
)
/*
	state=STATE \
	NWLN
	_XENUM4_TEST_STATE_SET_VAL(STATE, BOOST_PP_INC(_XENUM4_TEST_STATE_GET_VAL(STATE)))
*/

#define _XENUM4_TEST_CALC_FLT_1(ITERPOS, NODE, CTXT, STATE)	1
#define _XENUM4_TEST_CALC_FLT_0(ITERPOS, NODE, CTXT, STATE)	0
#define _XENUM4_TEST_CALC_FLT_COND(ITERPOS, NODE, CTXT, STATE)					\
	BOOST_PP_NOT(_XENUM4_TUPLETREE_ITERPOS_GET_LEVEL(ITERPOS))
//	BOOST_PP_NOT(_XENUM4_TUPLETREE_ITERPOS_GET_NEXTCHILD(ITERPOS))

#define _XENUM4_TEST_ITERATE_DEPTH_CALC(CTXT, PROPVALUE)						\
	_XENUM4_TUPLETREE_CALC_DUMP_STATE(							\
		_XENUM4_TUPLETREE_ITERATE_DEPTH_CALC(						\
			PROPVALUE,								\
			_XENUM4_PROPDEF_GET_DEPTH(_XENUM4_CTXT_GET_PROPDEF(CTXT)),		\
			(_XENUM4_TEST_CB_CALC, _XENUM4_TEST_CALC_FLT_COND),				\
			CTXT,									\
			_XENUM4_TEST_STATE_INIT()							\
		)										\
	)
/*
_TEST_ITERATE_DEPTH_CALC: ctxt=CTXT propvalue=PROPVALUE NWLN \
*/


/// =============================================================================================
/// Base loops for ITERATE_* tests above.
/// =============================================================================================

#define _XENUM4_TEST_RUN_VAL_I1(CTXT, PROPVALUE, TEST1, TEST2)					\
	BOOST_PP_CAT(BOOST_PP_CAT(_XENUM4_TEST_ITERATE_, TEST1), BOOST_PP_CAT(_, TEST2)) (CTXT, PROPVALUE)

#define _XENUM4_TEST_RUN_VAL(CTXT, IDENT, ...)							\
	_XENUM4_TEST_RUN_VAL_I1(									\
		_XENUM4_CTXT_SET_IDENT(CTXT, IDENT),						\
		_XENUM4_GET_VARARG(_XENUM4_CTXT_GET_PROPINDEX(CTXT), __VA_ARGS__),		\
/* Define to test DEPTH or FLAT: */ \
		FLAT,										\
/* Define to test GEN or CALC (or INC): */ \
		GEN										\
	)
/*
_TEST_RUN_VAL: ctxt=CTXT varargs=__VA_ARGS__ NWLN \
*/

#define _XENUM4_TEST_RUN_CALL_VALS_I1(CTXT, PROPDEF)						\
	_XENUM4_CALL_VALS(									\
		_XENUM4_TEST_RUN_VAL,								\
		_XENUM4_CTXT_SET_PROPDEF(CTXT, PROPDEF)						\
	)
/*
_TEST_RUN_CALL_VALS_I1: ctxt=CTXT propdef=PROPDEF NWLN \
*/

#define _XENUM4_TEST_RUN_CALL_VALS(Z, N, CTXT)							\
	_XENUM4_TEST_RUN_CALL_VALS_I1								\
	(											\
		_XENUM4_CTXT_SET_PROPINDEX(CTXT, N),						\
		_XENUM4_DECL_GET_PROPDEFN(_XENUM4_CTXT_GET_DECL(CTXT), N)			\
	)
/*
_TEST_RUN_CALL_VALS: z=Z n=N ctxt=CTXT NWLN \
*/

#define _XENUM4_TEST_RUN_LOOP_PROPIDX(CTXT)							\
	BOOST_PP_REPEAT(									\
		BOOST_PP_SEQ_SIZE(_XENUM4_DECL_GET_PROPDEFS(_XENUM4_CTXT_GET_DECL(CTXT))),	\
		_XENUM4_TEST_RUN_CALL_VALS,							\
		CTXT										\
		)
/*
_TEST_RUN_LOOP_PROPIDX: ctxt=CTXT NWLN								\
*/

#define _XENUM4_TEST_RUN()									\
	_XENUM4_TEST_RUN_LOOP_PROPIDX(_XENUM4_CTXT_INIT(_XENUM4_TEST_SUFFIX))



#include <xenum4/Xenum.hpp>
#undef _XENUM4_DO_DECLARE
#undef _XENUM4_DO_DEFINE

#define _XENUM4_DO_DECLARE(CTXT)								\

//_DO_DECLARE: ctxt=CTXT NWLN

#define _XENUM4_DO_DEFINE(CTXT)									\
_XENUM4_TEST_RUN()

//_XENUM4_DECL_INIT(Dummies)
//_DO_DEFINE: ctxt=CTXT NWLN

/*
TEST_TUPLE_FUNCS()
*/

#define DATA1 (a,b,c)
#define DATA2 (a)(b)(c)
#define DATA3 abc
#define TEST_ITERPOS _XENUM4_TUPLETREE_ITERPOS_INIT(3, (42)(43), 2, 5)

#define TEST_TUPLE_FUNCS() \
_GET_TUPLE_SIZE_IF_TUPLE [DATA1] = _XENUM4_GET_TUPLE_SIZE_IF_TUPLE(DATA1)	NWLN \
_GET_TUPLE_SIZE_IF_TUPLE [DATA2] = _XENUM4_GET_TUPLE_SIZE_IF_TUPLE(DATA2)	NWLN \
_GET_TUPLE_SIZE_IF_TUPLE [DATA3] = _XENUM4_GET_TUPLE_SIZE_IF_TUPLE(DATA3)	NWLN \
_TUPLE_TO_SEQ_IF_TUPLE [DATA1] = _XENUM4_TUPLE_TO_SEQ_IF_TUPLE(DATA1)	NWLN \
_TUPLE_TO_SEQ_IF_TUPLE [DATA2] = _XENUM4_TUPLE_TO_SEQ_IF_TUPLE(DATA2)	NWLN \
_TUPLE_TO_SEQ_IF_TUPLE [DATA3] = _XENUM4_TUPLE_TO_SEQ_IF_TUPLE(DATA3)	NWLN \
_TUPLETREE_ITERPOS_DUMP = {_XENUM4_TUPLETREE_ITERPOS_DUMP(TEST_ITERPOS)}

/// =============================================================================================
/// Testing data.
/// =============================================================================================
// Prevent Main.hpp from defining the main macros.
#define _XENUM4_IMPL_MAIN_HPP
#include "../util/Dummies/Dummies.hpp"
#include "../util/Dummies/Dummies.cpp"
